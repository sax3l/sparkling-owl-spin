[tool.poetry]
name = "ecadp"
version = "0.1.0"
description = "Ethical Crawler & Data Platform - Etisk och regelefterlevande plattform f√∂r webb-crawling och scraping"
authors = ["ECaDP Team <team@ecadp.se>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/sax3l/sparkling-owl-spin"
repository = "https://github.com/sax3l/sparkling-owl-spin"
documentation = "https://ecadp.readthedocs.io"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.104.1"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"
sqlalchemy = "^2.0.23"
alembic = "^1.13.1"
asyncpg = "^0.29.0"
psycopg2-binary = "^2.9.9"
redis = {extras = ["hiredis"], version = "^5.0.1"}
aioredis = "^2.0.1"
httpx = "^0.25.2"
aiohttp = "^3.9.1"
playwright = "^1.40.0"
selenium = "^4.16.0"
beautifulsoup4 = "^4.12.2"
lxml = "^4.9.3"
pyyaml = "^6.0.1"
jinja2 = "^3.1.2"
celery = {extras = ["redis"], version = "^5.3.4"}
apscheduler = "^3.10.4"
great-expectations = "^0.18.5"
pandas = "^2.1.4"
numpy = "^1.25.2"
openpyxl = "^3.1.2"
xlsxwriter = "^3.1.9"
google-auth = "^2.25.2"
google-auth-oauthlib = "^1.2.0"
google-auth-httplib2 = "^0.2.0"
google-api-python-client = "^2.111.0"
snowflake-connector-python = "^3.6.0"
elasticsearch = "^8.11.1"
prometheus-client = "^0.19.0"
structlog = "^23.2.0"
click = "^8.1.7"
typer = "^0.9.0"
cryptography = "^41.0.8"
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
python-multipart = "^0.0.6"
supabase = "^2.3.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-xdist = "^3.5.0"
black = "^23.11.0"
isort = "^5.12.0"
ruff = "^0.1.6"
mypy = "^1.7.1"
bandit = "^1.7.5"
safety = "^2.3.5"
pre-commit = "^3.6.0"
mkdocs = "^1.5.3"
mkdocs-material = "^9.4.10"
httpx-mock = "^0.10.1"
fakeredis = "^2.20.1"
factory-boy = "^3.3.0"
freezegun = "^1.2.2"

[tool.poetry.scripts]
ecadp = "src.main:main"
ecadp-crawler = "scripts.run_crawler:main"
ecadp-scraper = "scripts.run_scraper:main"
ecadp-scheduler = "scripts.start_scheduler:main"
ecadp-init-db = "scripts.init_db:main"
ecadp-seed = "scripts.seed_data:main"
ecadp-diagnose = "scripts.diagnostic_tool:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
skip_glob = ["*/migrations/*"]

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "N818",  # exception name should be named with an Error suffix
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B018", "B011"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "celery.*",
    "great_expectations.*",
    "selenium.*",
    "playwright.*",
    "redis.*",
    "aioredis.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*", "*Test"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "e2e: End-to-end tests",
    "slow: Slow tests",
    "selenium: Tests requiring Selenium",
    "playwright: Tests requiring Playwright",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
    "*/node_modules/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]