# ECaDP - Ethical Crawler & Data Platform
# Makefile f√∂r utveckling och drift

.PHONY: help up down test lint e2e seed gen-sdk docs clean install-dev

# Standard m√•l
help: ## Visa hj√§lp
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'

# Utvecklingsmilj√∂
up: ## Starta utvecklingsmilj√∂ (Docker Compose)
	docker-compose -f docker/docker-compose.dev.yml up -d
	@echo "üöÄ Utvecklingsmilj√∂ startad p√• http://localhost:8000"
	@echo "üìä Grafana: http://localhost:3000 (admin/admin)"
	@echo "üìà Prometheus: http://localhost:9090"

down: ## Stoppa utvecklingsmilj√∂
	docker-compose -f docker/docker-compose.dev.yml down
	docker-compose -f docker/docker-compose.synthetic.yml down

restart: down up ## Restart utvecklingsmilj√∂

# Databas
init: ## Initiera databas och migrationer
	python scripts/init_db.py
	@echo "‚úÖ Databas initierad"

seed: ## Ladda seed-data
	python scripts/seed_data.py
	@echo "‚úÖ Seed-data laddad"

# Tester
test: ## K√∂r unit tests
	pytest tests/unit/ -v --cov=src --cov-report=html
	@echo "‚úÖ Unit tests slutf√∂rda"

integration: ## K√∂r integration tests
	pytest tests/integration/ -v
	@echo "‚úÖ Integration tests slutf√∂rda"

e2e: ## K√∂r end-to-end tests
	docker-compose -f docker/docker-compose.synthetic.yml up -d
	sleep 10
	pytest tests/e2e/ -v
	docker-compose -f docker/docker-compose.synthetic.yml down
	@echo "‚úÖ E2E tests slutf√∂rda"

test-all: test integration e2e ## K√∂r alla tester

# Kvalitetsgranskning
lint: ## K√∂r linting (ruff, mypy, black)
	ruff check src/ --fix
	black src/
	isort src/
	mypy src/
	@echo "‚úÖ Linting slutf√∂rt"

security: ## K√∂r s√§kerhetsscanning
	bandit -r src/
	safety check
	@echo "‚úÖ S√§kerhetsscanning slutf√∂rd"

format: ## Formatera kod
	black src/
	isort src/
	@echo "‚úÖ Kod formaterad"

# SDK och dokumentation
gen-sdk: ## Generera SDK:er
	./scripts/generate_sdk.sh
	@echo "‚úÖ SDK:er genererade"

docs: ## Generera dokumentation
	cd docs && mkdocs build
	@echo "‚úÖ Dokumentation byggd i docs/site/"

docs-serve: ## Servera dokumentation lokalt
	cd docs && mkdocs serve
	@echo "üìö Dokumentation: http://localhost:8080"

# Drift och underh√•ll
backup: ## K√∂r manuell backup
	./scripts/backup_now.sh
	@echo "‚úÖ Backup slutf√∂rd"

restore-drill: ## K√∂r restore-√∂vning
	./scripts/restore_drill.sh
	@echo "‚úÖ Restore-√∂vning slutf√∂rd"

sync-s3: ## Synka data till S3
	./scripts/s3_sync.sh
	@echo "‚úÖ S3-synkronisering slutf√∂rd"

# Crawler och scraper
crawl: ## Starta crawler manuellt
	python scripts/run_crawler.py
	@echo "üï∑Ô∏è Crawler startad"

scrape: ## Starta scraper manuellt
	python scripts/run_scraper.py
	@echo "üîç Scraper startad"

scheduler: ## Starta scheduler
	python scripts/start_scheduler.py
	@echo "‚è∞ Scheduler startad"

analysis: ## K√∂r dataanalys
	python scripts/run_analysis.py
	@echo "üìä Analys slutf√∂rd"

diagnose: ## K√∂r diagnostikverktyg
	python scripts/diagnostic_tool.py
	@echo "üîß Diagnostik slutf√∂rd"

# Installation och setup
install-dev: ## Installera utvecklingsdependencies
	pip install -e .
	pip install -r requirements-dev.txt
	npm install
	@echo "‚úÖ Utvecklingsdependencies installerade"

install: ## Installera produktionsdependencies
	pip install -r requirements.txt
	@echo "‚úÖ Produktionsdependencies installerade"

# Reng√∂ring
clean: ## Rensa tempor√§ra filer
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete
	find . -type d -name ".pytest_cache" -delete
	rm -rf htmlcov/
	rm -rf .coverage
	@echo "üßπ Tempor√§ra filer rensade"

clean-data: ## Rensa lokal data (VARNING: raderar all data!)
	rm -rf data/raw/*
	rm -rf data/processed/*
	rm -rf data/exports/*
	@echo "‚ö†Ô∏è Lokal data rensad"

# Docker builds
build-app: ## Bygg app-container
	docker build -f docker/Dockerfile.app -t ecadp-app .

build-worker: ## Bygg worker-container
	docker build -f docker/Dockerfile.worker -t ecadp-worker .

build-browser: ## Bygg browser-container
	docker build -f docker/Dockerfile.browser -t ecadp-browser .

build-all: build-app build-worker build-browser ## Bygg alla containers

# Kubernetes
k8s-apply: ## Appliera K8s manifests
	kubectl apply -k iac/k8s/

k8s-delete: ## Ta bort K8s resources
	kubectl delete -k iac/k8s/

# Monitoring
logs-app: ## Visa app-loggar
	docker-compose -f docker/docker-compose.dev.yml logs -f app

logs-worker: ## Visa worker-loggar
	docker-compose -f docker/docker-compose.dev.yml logs -f worker

logs-all: ## Visa alla loggar
	docker-compose -f docker/docker-compose.dev.yml logs -f

# Utvecklingshj√§lp
shell-app: ## √ñppna shell i app-container
	docker-compose -f docker/docker-compose.dev.yml exec app bash

shell-worker: ## √ñppna shell i worker-container
	docker-compose -f docker/docker-compose.dev.yml exec worker bash

# Frontend
frontend-dev: ## Starta frontend i dev-l√§ge
	cd frontend && npm run dev

frontend-build: ## Bygg frontend f√∂r produktion
	cd frontend && npm run build

frontend-test: ## Testa frontend
	cd frontend && npm test

# Performance
benchmark: ## K√∂r performance benchmarks
	python -m pytest tests/performance/ -v
	@echo "‚ö° Performance benchmarks slutf√∂rda"

# Default m√•l
.DEFAULT_GOAL := help