# direnv configuration for automatic environment setup
# This file automatically loads environment variables when entering the project directory

# Load .env file if it exists
if [[ -f .env ]]; then
    dotenv
fi

# Set up Python environment
export PYTHONPATH="${PWD}/src:${PYTHONPATH}"

# Set up project-specific environment variables
export PROJECT_ROOT="${PWD}"
export PROJECT_NAME="Main_crawler_project"
export ENVIRONMENT="${ENVIRONMENT:-development}"

# Development tools paths
export PATH="${PWD}/bin:${PWD}/scripts:${PATH}"

# Python virtual environment activation (if using venv instead of poetry)
# Uncomment if using traditional venv
# if [[ -d venv ]]; then
#     source venv/bin/activate
# fi

# Poetry environment activation (recommended)
if command -v poetry &> /dev/null; then
    if [[ -f pyproject.toml ]]; then
        export VIRTUAL_ENV=$(poetry env info --path 2>/dev/null || echo "")
        if [[ -n "$VIRTUAL_ENV" && -d "$VIRTUAL_ENV" ]]; then
            export PATH="${VIRTUAL_ENV}/bin:${PATH}"
        fi
    fi
fi

# Database configuration
export DATABASE_URL="${DATABASE_URL:-postgresql://localhost:5432/crawler_db}"
export REDIS_URL="${REDIS_URL:-redis://localhost:6379/0}"

# Docker and Kubernetes configuration
export COMPOSE_PROJECT_NAME="${PROJECT_NAME}"
export KUBECONFIG="${KUBECONFIG:-${HOME}/.kube/config}"

# Observability
export PROMETHEUS_URL="${PROMETHEUS_URL:-http://localhost:9090}"
export GRAFANA_URL="${GRAFANA_URL:-http://localhost:3000}"

# Development configuration
export DEBUG="${DEBUG:-true}"
export LOG_LEVEL="${LOG_LEVEL:-DEBUG}"

# Testing configuration
export PYTEST_CURRENT_TEST="${PYTEST_CURRENT_TEST:-}"
export TESTING="${TESTING:-false}"

# Cloud configuration (examples - set in .env for actual values)
# export AWS_PROFILE="${AWS_PROFILE:-default}"
# export GOOGLE_APPLICATION_CREDENTIALS="${GOOGLE_APPLICATION_CREDENTIALS:-}"

echo "🚀 Environment loaded for ${PROJECT_NAME} (${ENVIRONMENT})"
echo "📁 Project root: ${PROJECT_ROOT}"
echo "🐍 Python path: ${PYTHONPATH}"

# Show active Python environment
if command -v python &> /dev/null; then
    echo "🐍 Python: $(python --version) at $(which python)"
fi

# Show active virtual environment
if [[ -n "$VIRTUAL_ENV" ]]; then
    echo "📦 Virtual env: ${VIRTUAL_ENV}"
fi
