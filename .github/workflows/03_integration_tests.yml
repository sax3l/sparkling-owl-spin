name: Integration Tests
on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [develop]
  schedule:
    - cron: "0 6 * * *"  # Daily at 6 AM UTC

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "20"

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements_dev.txt

      - name: Install Node.js dependencies
        run: |
          npm install -g pnpm
          cd frontend && pnpm install

      - name: Set up environment variables
        run: |
          cp .env.example .env
          echo "DATABASE_URL=postgresql://testuser:testpass@localhost:5432/testdb" >> .env
          echo "REDIS_URL=redis://localhost:6379/0" >> .env
          echo "JWT_SECRET_KEY=test-secret-key-for-ci" >> .env

      - name: Run database migrations
        run: |
          python scripts/init_db.py
          
      - name: Lint code
        run: |
          python -m ruff check src/ tests/
          python -m mypy src/

      - name: Run integration tests
        run: |
          python -m pytest tests/integration/ -v \
            --cov=src \
            --cov-report=xml \
            --cov-report=html \
            --junitxml=test-results.xml \
            --timeout=300

      - name: Run GraphQL schema tests
        run: |
          python -m pytest tests/integration/test_graphql_schema.py -v

      - name: Run API integration tests
        run: |
          python -m pytest tests/integration/test_api_rest.py -v

      - name: Run webhook integration tests
        run: |
          python -m pytest tests/integration/test_webhooks_hmac.py -v

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: ./coverage.xml
          flags: integration
          name: integration-coverage

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: |
            test-results.xml
            htmlcov/
            
      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
