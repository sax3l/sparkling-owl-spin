name: E2E Tests
on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  schedule:
    - cron: "0 4 * * *"  # Daily at 4 AM UTC

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "20"

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements_dev.txt
          pip install playwright

      - name: Install Node.js dependencies
        run: |
          npm install -g pnpm
          cd frontend && pnpm install

      - name: Install Playwright browsers
        run: playwright install chromium firefox webkit

      - name: Set up environment variables
        run: |
          cp .env.example .env
          echo "DATABASE_URL=postgresql://testuser:testpass@localhost:5432/testdb" >> .env
          echo "REDIS_URL=redis://localhost:6379/0" >> .env
          echo "JWT_SECRET_KEY=test-secret-key-for-ci" >> .env
          echo "BASE_URL=http://localhost:8000" >> .env

      - name: Run database migrations
        run: python scripts/init_db.py

      - name: Start synthetic test sites
        run: |
          docker-compose -f docker/synthetic-sites/docker-compose.yml up -d
          sleep 10

      - name: Start application
        run: |
          python main.py &
          sleep 15
          curl -f http://localhost:8000/health || exit 1

      - name: Run Python E2E tests
        run: |
          python -m pytest tests/e2e/ -v \
            --timeout=600 \
            --junitxml=e2e-test-results.xml

      - name: Run Playwright E2E tests
        run: |
          cd tests/e2e
          npx playwright test --reporter=html

      - name: Test form flow scenarios
        run: |
          python -m pytest tests/e2e/test_form_flow_vin_regnr.py -v

      - name: Test infinite scroll scenarios
        run: |
          python -m pytest tests/e2e/test_infinite_scroll.py -v

      - name: Test layout drift resilience
        run: |
          python -m pytest tests/e2e/test_layout_drift_resilience.py -v

      - name: Test privacy erasure
        run: |
          python -m pytest tests/e2e/test_privacy_erasure.py -v

      - name: Capture application logs
        if: failure()
        run: |
          docker logs $(docker ps -q) || true
          ps aux | grep python || true

      - name: Upload Playwright report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: tests/e2e/playwright-report/
          retention-days: 7

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: |
            e2e-test-results.xml
            tests/e2e/test-results/

      - name: Upload screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: e2e-screenshots
          path: tests/e2e/screenshots/

      - name: Cleanup
        if: always()
        run: |
          docker-compose -f docker/synthetic-sites/docker-compose.yml down
          pkill -f "python main.py" || true
