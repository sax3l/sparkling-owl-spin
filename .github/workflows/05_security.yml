name: Security Scanning
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: "0 2 * * 1"  # Weekly on Mondays at 2 AM UTC

env:
  PYTHON_VERSION: "3.11"

jobs:
  security-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety semgrep

      - name: Run Bandit security linter
        run: |
          bandit -r src/ -f json -o bandit-report.json || true
          bandit -r src/ -f txt

      - name: Run Safety vulnerability scanner
        run: |
          safety check --json --output safety-report.json || true
          safety check

      - name: Run Semgrep security scanner
        run: |
          semgrep --config=auto src/ --json --output=semgrep-report.json || true
          semgrep --config=auto src/

      - name: Upload Bandit results to GitHub Security
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: bandit-report.json
          category: bandit
        continue-on-error: true

      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-scan-results
          path: |
            bandit-report.json
            safety-report.json
            semgrep-report.json

  dependency-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  secret-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Run GitLeaks secret scanner
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  docker-security:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Build Docker image
        run: |
          docker build -t test-app:latest -f docker/Dockerfile.app .

      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'test-app:latest'
          format: 'sarif'
          output: 'trivy-container-results.sarif'

      - name: Upload container scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-container-results.sarif'

  code-analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python, javascript
          queries: security-extended

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{ matrix.language }}"

  compliance-check:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Check for required security files
        run: |
          echo "Checking for required security files..."
          test -f SECURITY.md || (echo "Missing SECURITY.md" && exit 1)
          test -f CODE_OF_CONDUCT.md || (echo "Missing CODE_OF_CONDUCT.md" && exit 1)
          test -f LICENSE || (echo "Missing LICENSE" && exit 1)
          
      - name: Validate security configurations
        run: |
          echo "Validating security configurations..."
          test -f config/security.yml || echo "Warning: No security config found"
          test -f .github/dependabot.yml || echo "Warning: No Dependabot config found"

      - name: Check for sensitive files
        run: |
          echo "Checking for accidentally committed sensitive files..."
          ! find . -name "*.key" -o -name "*.pem" -o -name ".env" | grep -v ".env.example" | head -1
          ! find . -name "id_rsa" -o -name "id_dsa" | head -1

  notification:
    runs-on: ubuntu-latest
    needs: [security-scan, dependency-scan, secret-scan, docker-security, code-analysis]
    if: failure()
    
    steps:
      - name: Notify security team
        run: |
          echo "Security scan failed. Please review the results."
          # Add notification logic here (Slack, email, etc.)
