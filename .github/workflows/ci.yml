name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint_and_type:
    name: 1. Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements_dev.txt
      - name: Run Ruff Linter
        run: ruff check .
      - name: Run Black Formatter Check
        run: black --check .
      - name: Run MyPy Type Checker
        run: mypy src/

  unit_tests:
    name: 2. Unit Tests
    runs-on: ubuntu-latest
    needs: lint_and_type
    steps:
      - uses: actions/checkout@v5
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements_dev.txt
      - name: Run Unit Tests with Coverage
        run: pytest -m unit --cov=src --cov-report=xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4

  integration_tests:
    name: 3. Integration & E2E Tests
    runs-on: ubuntu-latest
    needs: unit_tests
    steps:
      - uses: actions/checkout@v5
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements_dev.txt
      - name: Start Synthetic Services
        run: docker compose -f docker/docker-compose.synthetic.yml up -d
      - name: Run Integration & E2E Tests
        run: pytest -m "integration or e2e" --junitxml=test-results.xml
      - name: Store test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results.xml

  quality_gates:
    name: 4. Quality Gates
    runs-on: ubuntu-latest
    needs: integration_tests
    steps:
      - uses: actions/checkout@v5
      - uses: actions/download-artifact@v4
        with:
          name: test-results
      - name: Check Test Results Against SLOs
        run: |
          echo "Placeholder for quality gate script."
          echo "This script would parse test-results.xml to check:"
          echo "- SLI: Goodput Ratio > 0.8"
          echo "- Selector Regression Match > 95%"
          echo "- 4xx Error Ratio < 12%"
          echo "If any threshold is breached, this script would exit with a non-zero code, failing the build."
          # Example: python scripts/check_ci_gates.py --results test-results.xml
          exit 0 # For now, always pass

  build_and_push:
    name: 5. Build & Push Images
    runs-on: ubuntu-latest
    needs: quality_gates
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: your-repo/ecadp:${{ github.sha }}