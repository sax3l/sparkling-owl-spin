#!/usr/bin/env python3
"""
Penetration Testing Plugin Registry för Sparkling-Owl-Spin
Central registry för alla penetrationstesting-verktyg
"""

import logging
from typing import Dict, List, Any, Optional
from enum import Enum

# Import alla pentest adapters
from .cloudflare_bypass import CloudflareBypassAdapter
from .captcha_solver import CaptchaSolverAdapter  
from .undetected_browser import UndetectedBrowserAdapter
from .uac_bypass import UACBypassAdapter
from .cve_exploits import CVEExploitFramework
from .phishing_framework import PhishingFramework

logger = logging.getLogger(__name__)

class PentestToolCategory(Enum):
    """Kategorier för penetrationstest-verktyg"""
    BYPASS_TOOLS = "bypass_tools"
    AUTOMATION_TOOLS = "automation_tools"
    PRIVILEGE_ESCALATION = "privilege_escalation"
    EXPLOIT_FRAMEWORKS = "exploit_frameworks"
    SOCIAL_ENGINEERING = "social_engineering"

# Pentest plugin registry
PENTEST_PLUGINS = {
    # Bypass Tools
    "cloudflare_bypass": {
        "name": "Cloudflare Bypass Adapter",
        "description": "Bypass Cloudflare protection för penetrationstestning av egna servrar",
        "adapter_class": CloudflareBypassAdapter,
        "category": PentestToolCategory.BYPASS_TOOLS,
        "security_level": "red",  # Kräver explicit auktorisation
        "version": "1.0.0",
        "author": "Sparkling-Owl-Spin Security Team",
        "tags": ["cloudflare", "bypass", "ddos-protection", "web-security"],
        "swedish_name": "Cloudflare Bypass-adapter",
        "swedish_description": "Kringgå Cloudflare-skydd för penetrationstestning av egna servrar",
        "requires_authorization": True,
        "authorized_targets_only": True,
        "disclaimer": "ENDAST för penetrationstestning av egna servrar och med explicit tillstånd"
    },
    
    "captcha_solver": {
        "name": "CAPTCHA Solver Adapter", 
        "description": "Lös CAPTCHA-utmaningar för penetrationstestning av egna servrar",
        "adapter_class": CaptchaSolverAdapter,
        "category": PentestToolCategory.BYPASS_TOOLS,
        "security_level": "red",
        "version": "1.0.0",
        "author": "Sparkling-Owl-Spin Security Team", 
        "tags": ["captcha", "2captcha", "recaptcha", "turnstile", "solver"],
        "swedish_name": "CAPTCHA-lösare",
        "swedish_description": "Lös CAPTCHA-utmaningar för penetrationstestning av egna servrar",
        "requires_authorization": True,
        "authorized_targets_only": True,
        "disclaimer": "ENDAST för penetrationstestning av egna servrar och med explicit tillstånd"
    },
    
    # Automation Tools
    "undetected_browser": {
        "name": "Undetected Browser Adapter",
        "description": "Undetected browser automation för penetrationstestning",
        "adapter_class": UndetectedBrowserAdapter,
        "category": PentestToolCategory.AUTOMATION_TOOLS,
        "security_level": "red",
        "version": "1.0.0",
        "author": "Sparkling-Owl-Spin Security Team",
        "tags": ["browser", "automation", "stealth", "tls-fingerprinting", "selenium"],
        "swedish_name": "Undetected Browser-adapter",
        "swedish_description": "Undetected browser-automatisering för penetrationstestning",
        "requires_authorization": True,
        "authorized_targets_only": True,
        "disclaimer": "ENDAST för penetrationstestning av egna servrar och med explicit tillstånd"
    },
    
    # Privilege Escalation
    "uac_bypass": {
        "name": "UAC Bypass Adapter",
        "description": "Windows UAC bypass techniques för penetrationstestning",
        "adapter_class": UACBypassAdapter,
        "category": PentestToolCategory.PRIVILEGE_ESCALATION,
        "security_level": "red",
        "version": "1.0.0",
        "author": "Sparkling-Owl-Spin Security Team",
        "tags": ["uac", "bypass", "windows", "privilege-escalation", "fodhelper"],
        "swedish_name": "UAC Bypass-adapter",
        "swedish_description": "Windows UAC bypass-tekniker för penetrationstestning",
        "requires_authorization": True,
        "authorized_targets_only": True,
        "disclaimer": "ENDAST för penetrationstestning av egna Windows-servrar och med explicit tillstånd",
        "platform_specific": "windows"
    },
    
    # Exploit Frameworks
    "cve_exploits": {
        "name": "CVE Exploit Framework",
        "description": "CVE exploit framework för penetrationstestning av egna servrar",
        "adapter_class": CVEExploitFramework,
        "category": PentestToolCategory.EXPLOIT_FRAMEWORKS,
        "security_level": "red",
        "version": "1.0.0",
        "author": "Sparkling-Owl-Spin Security Team",
        "tags": ["cve", "exploits", "vulnerabilities", "security", "metasploit"],
        "swedish_name": "CVE Exploit Framework",
        "swedish_description": "CVE exploit framework för penetrationstestning av egna servrar",
        "requires_authorization": True,
        "authorized_targets_only": True,
        "disclaimer": "ENDAST för penetrationstestning av egna servrar och med explicit tillstånd"
    },
    
    # Social Engineering
    "phishing_framework": {
        "name": "Phishing Framework",
        "description": "Social engineering och phishing för penetrationstestning av egna organisationer",
        "adapter_class": PhishingFramework,
        "category": PentestToolCategory.SOCIAL_ENGINEERING,
        "security_level": "red",
        "version": "1.0.0", 
        "author": "Sparkling-Owl-Spin Security Team",
        "tags": ["phishing", "social-engineering", "email", "templates", "awareness"],
        "swedish_name": "Phishing Framework",
        "swedish_description": "Social engineering och phishing för penetrationstestning av egna organisationer",
        "requires_authorization": True,
        "authorized_targets_only": True,
        "disclaimer": "ENDAST för penetrationstestning av egna organisationer och med explicit tillstånd"
    }
}

def get_pentest_plugins_by_category(category: PentestToolCategory) -> Dict[str, Dict[str, Any]]:
    """Hämta pentest plugins filtrerade efter kategori"""
    return {
        plugin_id: plugin_info 
        for plugin_id, plugin_info in PENTEST_PLUGINS.items()
        if plugin_info["category"] == category
    }

def get_all_pentest_plugins() -> Dict[str, Dict[str, Any]]:
    """Hämta alla pentest plugins"""
    return PENTEST_PLUGINS.copy()

def get_pentest_plugin_info(plugin_id: str) -> Optional[Dict[str, Any]]:
    """Hämta information om en specifik pentest plugin"""
    return PENTEST_PLUGINS.get(plugin_id)

def is_pentest_plugin_available(plugin_id: str) -> bool:
    """Kontrollera om pentest plugin är tillgänglig"""
    return plugin_id in PENTEST_PLUGINS

def get_pentest_security_warning() -> str:
    """Hämta säkerhetsvarning för penetrationstest-verktyg"""
    return """
    ⚠️ SÄKERHETSVARNING - PENETRATIONSTEST-VERKTYG ⚠️
    
    Dessa verktyg är ENDAST avsedda för:
    • Penetrationstestning av EGNA servrar och system
    • Auktoriserade säkerhetstester med EXPLICIT tillstånd
    • Utbildning i kontrollerad miljö
    
    ANVÄND ALDRIG dessa verktyg för:
    • Obehöriga intrång i andras system
    • Skadlig verksamhet eller cyberbrott
    • Testning utan explicit skriftligt tillstånd
    
    Användaren är FULLT ANSVARIG för att följa gällande lagar
    och erhålla nödvändiga tillstånd innan användning.
    
    All användning loggas och övervakas.
    """

def get_pentest_usage_guidelines() -> Dict[str, List[str]]:
    """Hämta riktlinjer för användning av pentest-verktyg"""
    return {
        "före_användning": [
            "Erhåll skriftligt tillstånd från systemägare",
            "Dokumentera testomfång och begränsningar", 
            "Säkerställ att säkerhetskopior finns",
            "Informera relevanta säkerhetsteam",
            "Förbered incident response-procedurer"
        ],
        
        "under_testning": [
            "Håll dig inom auktoriserat omfång",
            "Dokumentera alla åtgärder och fynd",
            "Undvik att orsaka serviceavbrott",
            "Respektera datasäkerhet och integritet",
            "Stoppa vid första tecken på skada"
        ],
        
        "efter_testning": [
            "Rensa alla testdata och artefakter",
            "Återställ system till ursprungligt tillstånd",
            "Dokumentera sårbarheter och rekommendationer",
            "Rapportera fynd till berörda parter",
            "Förstör känslig information säkert"
        ],
        
        "juridiska_krav": [
            "Följ lokala och nationella lagar",
            "Respektera GDPR och dataskyddsförordningar",
            "Dokumentera alla avtal och tillstånd",
            "Säkerställ försäkringsskydd",
            "Konsultera juridisk rådgivning vid behov"
        ]
    }

def validate_pentest_authorization(plugin_id: str, target: str, 
                                 authorization_token: Optional[str] = None) -> bool:
    """Validera auktorisation för pentest-verktyg (mock implementation)"""
    plugin_info = get_pentest_plugin_info(plugin_id)
    
    if not plugin_info:
        logger.error(f"Unknown pentest plugin: {plugin_id}")
        return False
        
    if not plugin_info.get("requires_authorization", False):
        return True
        
    # I produktion skulle detta kontrollera mot riktig auktoriseringsdatabas
    logger.warning(f"⚠️ Pentest authorization required för {plugin_id} -> {target}")
    
    # Mock: returnera False för att kräva explicit auktorisation
    return False

def log_pentest_usage(plugin_id: str, target: str, action: str, 
                     user_id: Optional[str] = None):
    """Logga användning av pentest-verktyg"""
    logger.info(f"🔍 PENTEST LOG: {plugin_id} | {action} | {target} | User: {user_id}")
    
    # I produktion skulle detta skicka till säkerhetslogg/SIEM
    audit_entry = {
        "timestamp": logger.name,  # Should use actual timestamp
        "plugin": plugin_id,
        "target": target,
        "action": action,
        "user": user_id,
        "category": "penetration_testing"
    }
    
    # Skicka till audit log (mock)
    logger.info(f"📋 Audit entry created: {audit_entry}")

# Exportera key functions och klasser
__all__ = [
    'PENTEST_PLUGINS',
    'PentestToolCategory',
    'get_pentest_plugins_by_category',
    'get_all_pentest_plugins', 
    'get_pentest_plugin_info',
    'is_pentest_plugin_available',
    'get_pentest_security_warning',
    'get_pentest_usage_guidelines',
    'validate_pentest_authorization',
    'log_pentest_usage',
    # Adapter classes
    'CloudflareBypassAdapter',
    'CaptchaSolverAdapter',
    'UndetectedBrowserAdapter', 
    'UACBypassAdapter',
    'CVEExploitFramework',
    'PhishingFramework'
]
