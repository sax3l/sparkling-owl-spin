"""
Skript f√∂r att starta syntetiska test-tj√§nster

F√∂r nyb√∂rjare: Detta skript startar alla Docker-containers med
syntetiska webbsajter som vi anv√§nder f√∂r E2E-tester.

Anv√§ndning:
    python start_synthetic_services.py [--build] [--logs]
    
    --build: Bygg om Docker images innan start
    --logs: Visa loggar fr√•n alla containers
"""

import subprocess
import sys
import time
import argparse
import json
from pathlib import Path


def run_command(cmd, cwd=None, check=True):
    """K√∂r shell-kommando och returnera resultat"""
    print(f"üìã K√∂r: {cmd}")
    try:
        result = subprocess.run(
            cmd,
            shell=True,
            cwd=cwd,
            capture_output=True,
            text=True,
            check=check
        )
        return result
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Kommando misslyckades: {e}")
        print(f"üì§ Stdout: {e.stdout}")
        print(f"üì§ Stderr: {e.stderr}")
        raise


def check_docker():
    """Kontrollera att Docker √§r tillg√§ngligt"""
    try:
        result = run_command("docker --version", check=False)
        if result.returncode != 0:
            print("‚ùå Docker √§r inte installerat eller k√∂rs inte")
            print("   Installera Docker Desktop och starta det f√∂rst")
            sys.exit(1)
        print(f"‚úÖ Docker hittades: {result.stdout.strip()}")
    except FileNotFoundError:
        print("‚ùå Docker-kommando hittades inte")
        sys.exit(1)


def check_docker_compose():
    """Kontrollera att Docker Compose √§r tillg√§ngligt"""
    try:
        result = run_command("docker compose version", check=False)
        if result.returncode != 0:
            # F√∂rs√∂k med √§ldre version
            result = run_command("docker-compose --version", check=False)
            if result.returncode != 0:
                print("‚ùå Docker Compose √§r inte tillg√§ngligt")
                sys.exit(1)
            return "docker-compose"
        print(f"‚úÖ Docker Compose hittades: {result.stdout.strip()}")
        return "docker compose"
    except FileNotFoundError:
        print("‚ùå Docker Compose-kommando hittades inte")
        sys.exit(1)


def build_services(compose_cmd, docker_dir):
    """Bygg alla syntetiska tj√§nster"""
    print("üî® Bygger syntetiska tj√§nster...")
    
    compose_file = docker_dir / "docker-compose.synthetic.yml"
    
    cmd = f"{compose_cmd} -f {compose_file} build"
    run_command(cmd, cwd=docker_dir)
    
    print("‚úÖ Alla tj√§nster har byggts")


def start_services(compose_cmd, docker_dir):
    """Starta alla syntetiska tj√§nster"""
    print("üöÄ Startar syntetiska tj√§nster...")
    
    compose_file = docker_dir / "docker-compose.synthetic.yml"
    
    cmd = f"{compose_cmd} -f {compose_file} up -d"
    run_command(cmd, cwd=docker_dir)
    
    print("‚úÖ Alla tj√§nster har startats")


def wait_for_services():
    """V√§nta p√• att alla tj√§nster √§r redo"""
    print("‚è≥ V√§ntar p√• att tj√§nster ska starta...")
    
    services = [
        ("Static List", "http://localhost:8081", 8081),
        ("Infinite Scroll", "http://localhost:8082", 8082),
        ("Form Flow", "http://localhost:8083", 8083)
    ]
    
    max_wait = 60  # sekunder
    wait_interval = 2
    
    for service_name, url, port in services:
        print(f"üîç Kontrollerar {service_name} p√• port {port}...")
        
        waited = 0
        while waited < max_wait:
            try:
                import urllib.request
                with urllib.request.urlopen(url, timeout=5) as response:
                    if response.status == 200:
                        print(f"‚úÖ {service_name} √§r redo!")
                        break
            except:
                pass
            
            time.sleep(wait_interval)
            waited += wait_interval
            print(f"   V√§ntar... ({waited}s/{max_wait}s)")
        else:
            print(f"‚ùå {service_name} startade inte inom {max_wait} sekunder")
            return False
    
    return True


def show_service_status(compose_cmd, docker_dir):
    """Visa status f√∂r alla tj√§nster"""
    print("\nüìä Tj√§nststatus:")
    
    compose_file = docker_dir / "docker-compose.synthetic.yml"
    
    cmd = f"{compose_cmd} -f {compose_file} ps"
    result = run_command(cmd, cwd=docker_dir, check=False)
    print(result.stdout)


def show_service_logs(compose_cmd, docker_dir):
    """Visa loggar fr√•n alla tj√§nster"""
    print("\nüìã Tj√§nstloggar:")
    
    compose_file = docker_dir / "docker-compose.synthetic.yml"
    
    cmd = f"{compose_cmd} -f {compose_file} logs --tail=50"
    result = run_command(cmd, cwd=docker_dir, check=False)
    print(result.stdout)


def show_usage_info():
    """Visa anv√§ndningsinformation"""
    print("\nüéØ Syntetiska Test-tj√§nster Redo!")
    print("=" * 50)
    print("üìã Static List Service:     http://localhost:8081/list")
    print("üì± Infinite Scroll Service: http://localhost:8082/scroll")
    print("üìù Form Flow Service:       http://localhost:8083/form")
    print("=" * 50)
    print()
    print("üß™ F√∂r att k√∂ra E2E-tester:")
    print("   pytest tests/e2e/ -v -x")
    print()
    print("üõë F√∂r att stoppa tj√§nster:")
    print("   docker compose -f docker/docker-compose.synthetic.yml down")
    print()
    print("üìä F√∂r att se status:")
    print("   docker compose -f docker/docker-compose.synthetic.yml ps")
    print()


def main():
    parser = argparse.ArgumentParser(
        description="Starta syntetiska test-tj√§nster f√∂r E2E-tester"
    )
    parser.add_argument(
        "--build", 
        action="store_true", 
        help="Bygg om Docker images innan start"
    )
    parser.add_argument(
        "--logs", 
        action="store_true", 
        help="Visa loggar fr√•n alla containers"
    )
    parser.add_argument(
        "--status", 
        action="store_true", 
        help="Visa endast status utan att starta"
    )
    
    args = parser.parse_args()
    
    # Hitta projektroten
    script_dir = Path(__file__).parent
    docker_dir = script_dir / "docker"
    
    if not docker_dir.exists():
        print(f"‚ùå Docker-katalog hittades inte: {docker_dir}")
        sys.exit(1)
    
    print("üê≥ Syntetiska Test-tj√§nster Starter")
    print("=" * 40)
    
    # Kontrollera f√∂ruts√§ttningar
    check_docker()
    compose_cmd = check_docker_compose()
    
    if args.status:
        show_service_status(compose_cmd, docker_dir)
        return
    
    try:
        # Bygg tj√§nster om beg√§rt
        if args.build:
            build_services(compose_cmd, docker_dir)
        
        # Starta tj√§nster
        start_services(compose_cmd, docker_dir)
        
        # V√§nta p√• att tj√§nster blir redo
        if wait_for_services():
            show_service_status(compose_cmd, docker_dir)
            
            if args.logs:
                show_service_logs(compose_cmd, docker_dir)
            
            show_usage_info()
        else:
            print("‚ùå N√•gra tj√§nster kunde inte startas korrekt")
            show_service_status(compose_cmd, docker_dir)
            show_service_logs(compose_cmd, docker_dir)
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\nüõë Avbruten av anv√§ndare")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Ov√§ntat fel: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
