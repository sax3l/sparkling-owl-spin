version: '3.8'

services:
  # Main application
  web:
    build:
      context: .
      dockerfile: docker/Dockerfile.app
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://crawler_user:crawler_pass@postgres:5432/crawler_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - ENVIRONMENT=development
    depends_on:
      - postgres
      - redis
    volumes:
      - ./data:/app/data
      - ./config:/app/config
    networks:
      - crawler-network
    restart: unless-stopped

  # Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=crawler_db
      - POSTGRES_USER=crawler_user
      - POSTGRES_PASSWORD=crawler_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - crawler-network
    restart: unless-stopped

  # Redis cache and message broker
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - crawler-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Crawler worker
  crawler-worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    environment:
      - DATABASE_URL=postgresql://crawler_user:crawler_pass@postgres:5432/crawler_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - WORKER_TYPE=crawler
      - WORKER_CONCURRENCY=4
    depends_on:
      - postgres
      - redis
    volumes:
      - ./data:/app/data
      - ./config:/app/config
    networks:
      - crawler-network
    restart: unless-stopped
    deploy:
      replicas: 2

  # Scraper worker with browser support
  scraper-worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.browser
    environment:
      - DATABASE_URL=postgresql://crawler_user:crawler_pass@postgres:5432/crawler_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - WORKER_TYPE=scraper
      - WORKER_CONCURRENCY=2
    depends_on:
      - postgres
      - redis
    volumes:
      - ./data:/app/data
      - ./config:/app/config
    networks:
      - crawler-network
    restart: unless-stopped
    shm_size: 2gb

  # Scheduler worker
  scheduler-worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    environment:
      - DATABASE_URL=postgresql://crawler_user:crawler_pass@postgres:5432/crawler_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - WORKER_TYPE=scheduler
      - WORKER_CONCURRENCY=1
    depends_on:
      - postgres
      - redis
    volumes:
      - ./data:/app/data
      - ./config:/app/config
    networks:
      - crawler-network
    restart: unless-stopped

  # Analysis worker
  analysis-worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    environment:
      - DATABASE_URL=postgresql://crawler_user:crawler_pass@postgres:5432/crawler_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - WORKER_TYPE=analysis
      - WORKER_CONCURRENCY=2
    depends_on:
      - postgres
      - redis
    volumes:
      - ./data:/app/data
      - ./config:/app/config
    networks:
      - crawler-network
    restart: unless-stopped

  # Flower monitoring
  flower:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - WORKER_TYPE=flower
    depends_on:
      - redis
    networks:
      - crawler-network
    restart: unless-stopped

  # Synthetic test sites
  synthetic-sites:
    build:
      context: .
      dockerfile: docker/Dockerfile.synthetic
    ports:
      - "8080:80"
      - "5000:5000"
    networks:
      - crawler-network
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/ssl:/etc/ssl/certs
    depends_on:
      - web
    networks:
      - crawler-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  crawler-network:
    driver: bridge
