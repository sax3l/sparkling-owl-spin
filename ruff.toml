[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate (commented-out code)
    "PL",   # pylint
    "RUF",  # ruff-specific rules
]

ignore = [
    "E501",    # line too long, handled by black
    "B008",    # do not perform function calls in argument defaults
    "B905",    # zip without an explicit strict parameter
    "C901",    # too complex
    "PLR0911", # too many return statements
    "PLR0912", # too many branches
    "PLR0913", # too many arguments
    "PLR0915", # too many statements
    "PLR2004", # magic value used in comparison
    "SIM108",  # use ternary operator
    "ARG001",  # unused function argument
    "ARG002",  # unused method argument
    "TCH001",  # move application import into TYPE_CHECKING block
    "TCH002",  # move third-party import into TYPE_CHECKING block
    "TCH003",  # move standard library import into TYPE_CHECKING block
]

exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "migrations",
    "alembic",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # imported but unused
"tests/**/*.py" = [
    "S101",   # use of assert
    "PLR2004", # magic value used in comparison
    "S105",   # hardcoded password
    "S106",   # hardcoded password
    "ARG001", # unused function argument
]
"scripts/**/*.py" = [
    "T201",   # print found
    "S101",   # use of assert
    "PLR2004", # magic value used in comparison
]
"conftest.py" = ["ARG001"]

[tool.ruff.isort]
force-single-line = false
force-sort-within-sections = false
lines-after-imports = 2
known-first-party = ["src"]
known-local-folder = ["tests"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.ruff.flake8-type-checking]
runtime-evaluated-base-classes = ["pydantic.BaseModel", "sqlalchemy.orm.DeclarativeBase"]

[tool.ruff.pylint]
max-args = 7
max-branches = 15
max-returns = 8
max-statements = 60

[tool.ruff.mccabe]
max-complexity = 12
