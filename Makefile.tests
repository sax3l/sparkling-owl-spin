# ECaDP Test Framework Makefile
#
# F√∂r nyb√∂rjare: Detta Makefile inneh√•ller genv√§gar f√∂r vanliga test-operationer.
# Anv√§ndning: make <target>
#
# Exempel:
#   make test-all        # K√∂r alla tester
#   make test-unit       # K√∂r endast unit-tester
#   make start-synthetic # Starta syntetiska tj√§nster f√∂r E2E-tester

.PHONY: help test-all test-unit test-integration test-e2e start-synthetic stop-synthetic clean coverage

# Standard target
help:
	@echo "ECaDP Test Framework"
	@echo "===================="
	@echo ""
	@echo "Tillg√§ngliga kommandon:"
	@echo ""
	@echo "Tester:"
	@echo "  test-all           K√∂r alla tester (unit + integration + e2e)"
	@echo "  test-unit          K√∂r endast unit-tester"
	@echo "  test-integration   K√∂r endast integration-tester" 
	@echo "  test-e2e           K√∂r endast E2E-tester"
	@echo "  test-quick         K√∂r snabba tester (unit + integration)"
	@echo ""
	@echo "Syntetiska tj√§nster:"
	@echo "  start-synthetic    Starta syntetiska test-tj√§nster"
	@echo "  stop-synthetic     Stoppa syntetiska test-tj√§nster"
	@echo "  restart-synthetic  Starta om syntetiska tj√§nster"
	@echo ""
	@echo "Utveckling:"
	@echo "  coverage           K√∂r tester med code coverage"
	@echo "  install-deps       Installera test-beroenden"
	@echo "  clean              Rensa test-artifacts"
	@echo ""
	@echo "GitHub Copilot:"
	@echo "  test-copilot       K√∂r tester optimerade f√∂r Copilot-utveckling"

# Huvudtestkommandon
test-all:
	@echo "üß™ K√∂r alla tester..."
	python scripts/run_tests.py --type all --verbose

test-unit:
	@echo "‚ö° K√∂r unit-tester..."
	python scripts/run_tests.py --type unit --verbose

test-integration:
	@echo "üîó K√∂r integration-tester..."
	python scripts/run_tests.py --type integration --verbose

test-e2e:
	@echo "üåê K√∂r E2E-tester..."
	python scripts/run_tests.py --type e2e --verbose

test-quick:
	@echo "‚ö° K√∂r snabba tester (unit + integration)..."
	pytest tests/unit/ tests/integration/ -v -m "not slow"

# GitHub Copilot-optimerade tester
test-copilot:
	@echo "ü§ñ K√∂r Copilot-optimerade tester..."
	pytest tests/unit/ -v --tb=short -x

# Syntetiska tj√§nster
start-synthetic:
	@echo "üê≥ Startar syntetiska test-tj√§nster..."
	python scripts/start_synthetic_services.py --build

stop-synthetic:
	@echo "üõë Stoppar syntetiska test-tj√§nster..."
	docker compose -f docker/docker-compose.synthetic.yml down

restart-synthetic: stop-synthetic start-synthetic

# Coverage och kvalitet
coverage:
	@echo "üìä K√∂r tester med code coverage..."
	python scripts/run_tests.py --coverage
	@echo "üìà Coverage-rapport: htmlcov/index.html"

# Installation och setup
install-deps:
	@echo "üì¶ Installerar test-beroenden..."
	pip install -r requirements_dev.txt
	playwright install chromium

# Rensning
clean:
	@echo "üßπ Rensar test-artifacts..."
	rm -f test_results_*.json
	rm -rf htmlcov/
	rm -rf .pytest_cache/
	rm -rf __pycache__/
	find . -name "*.pyc" -delete
	find . -name "__pycache__" -type d -exec rm -rf {} +

# Docker-specifika kommandon (f√∂r Windows compatibility)
docker-status:
	@echo "üê≥ Docker status:"
	docker compose -f docker/docker-compose.synthetic.yml ps

docker-logs:
	@echo "üìã Docker logs:"
	docker compose -f docker/docker-compose.synthetic.yml logs --tail=50

# Utveckling och debug
debug-unit:
	@echo "üêõ Debug unit-tester..."
	pytest tests/unit/ -v --tb=long --log-cli-level=DEBUG -s

debug-e2e:
	@echo "üêõ Debug E2E-tester..."
	pytest tests/e2e/ -v --tb=long --log-cli-level=DEBUG -s --headed

# Validator-specifika tester f√∂r vanliga anv√§ndningsfall
test-validators:
	@echo "‚úÖ Testar datavalidatorer..."
	pytest tests/unit/test_validators.py -v

test-transformers:
	@echo "üîÑ Testar datatransformatorer..."
	pytest tests/unit/test_transformers.py -v

test-scrapers:
	@echo "üï∑Ô∏è Testar scraper-funktionalitet..."
	pytest tests/e2e/ -v -k "scraping"

# Performance-tester
test-performance:
	@echo "‚ö° K√∂r performance-tester..."
	pytest tests/integration/ tests/e2e/ -v -m "slow" --timeout=120

# S√§kerhetstester  
test-security:
	@echo "üîí K√∂r s√§kerhetstester..."
	pytest tests/integration/ -v -k "csrf or auth or security"

# Alla tester men stoppa vid f√∂rsta fel (f√∂r snabb feedback)
test-fail-fast:
	@echo "‚ö° K√∂r tester med fail-fast..."
	python scripts/run_tests.py --stop-on-fail --verbose

# Continuous Integration simulation
test-ci:
	@echo "üîÑ Simulerar CI-milj√∂..."
	python scripts/run_tests.py --type all --coverage
	@echo "‚úÖ CI-simulation klar. Kontrollera test_results_*.json"

# Markdown linting f√∂r dokumentation
lint-docs:
	@echo "üìù Lintar dokumentation..."
	markdownlint tests/README.md || echo "Markdownlint inte installerat, hoppar √∂ver"

# Help f√∂r pytest markers
markers:
	@echo "üè∑Ô∏è Tillg√§ngliga pytest markers:"
	@echo ""
	@echo "unit        - Unit-tester (snabba, isolerade)"
	@echo "integration - Integration-tester (databas, Redis, etc)"
	@echo "e2e         - End-to-end tester (webbl√§sare)"
	@echo "db          - Tester som kr√§ver databas"
	@echo "browser     - Tester som kr√§ver webbl√§sare"
	@echo "slow        - L√•ngsamma tester (>5 sekunder)"
	@echo ""
	@echo "Exempel:"
	@echo "  pytest -m unit                 # Endast unit-tester"
	@echo "  pytest -m 'not slow'           # Inga l√•ngsamma tester"
	@echo "  pytest -m 'e2e and browser'    # E2E webbl√§sartester"
