#!/usr/bin/env python3
"""
Phishing Framework f√∂r Sparkling-Owl-Spin
Social Engineering och Phishing templates f√∂r penetrationstestning av egna servrar/organisationer
"""

import logging
import asyncio
import aiohttp
import json
import time
import hashlib
import tempfile
import base64
from typing import Dict, List, Any, Optional, Union, Set
from dataclasses import dataclass
from datetime import datetime, timedelta
from enum import Enum
from pathlib import Path
from urllib.parse import urljoin, urlparse
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders

logger = logging.getLogger(__name__)

class PhishingType(Enum):
    """Phishing attack types"""
    EMAIL_CREDENTIAL_HARVEST = "email_credential_harvest"
    EMAIL_MALWARE_DELIVERY = "email_malware_delivery"
    SMS_PHISHING = "sms_phishing"
    VOICE_PHISHING = "voice_phishing"
    WEB_CREDENTIAL_HARVEST = "web_credential_harvest"
    SOCIAL_MEDIA_PHISHING = "social_media_phishing"
    QR_CODE_PHISHING = "qr_code_phishing"
    SPEAR_PHISHING = "spear_phishing"

class TemplateCategory(Enum):
    """Phishing template categories"""
    BANKING = "banking"
    SOCIAL_MEDIA = "social_media"
    ECOMMERCE = "ecommerce"
    CLOUD_SERVICES = "cloud_services"
    GOVERNMENT = "government"
    HEALTHCARE = "healthcare"
    EDUCATION = "education"
    CORPORATE = "corporate"
    SECURITY_ALERTS = "security_alerts"

class DeliveryMethod(Enum):
    """Delivery methods"""
    EMAIL = "email"
    SMS = "sms"
    WEB = "web"
    VOICE = "voice"
    PHYSICAL = "physical"
    QR_CODE = "qr_code"

@dataclass
class PhishingTemplate:
    """Phishing template data"""
    name: str
    category: TemplateCategory
    phishing_type: PhishingType
    delivery_method: DeliveryMethod
    subject_line: Optional[str]
    html_content: str
    text_content: Optional[str]
    landing_page_url: Optional[str]
    success_indicators: List[str]
    target_demographic: str
    difficulty_level: int  # 1-5 scale
    social_engineering_techniques: List[str]

@dataclass
class PhishingCampaign:
    """Phishing campaign configuration"""
    campaign_id: str
    name: str
    template: PhishingTemplate
    target_list: List[Dict[str, str]]  # email, name, department, etc.
    smtp_config: Optional[Dict[str, Any]]
    tracking_enabled: bool
    scheduled_time: Optional[datetime]
    authorized_organization: str

@dataclass
class PhishingResult:
    """Phishing campaign result"""
    campaign_id: str
    total_targets: int
    emails_sent: int
    delivery_failures: int
    clicks_tracked: int
    credentials_harvested: int
    success_rate: float
    execution_time: float
    error_messages: List[str]

class PhishingFramework:
    """Phishing Framework f√∂r penetrationstestning av egna organisationer"""
    
    def __init__(self, plugin_info):
        self.plugin_info = plugin_info
        self.initialized = False
        self.session: Optional[aiohttp.ClientSession] = None
        
        # Penetrationstestning disclaimer
        self.authorized_organizations = set()
        self.authorized_domains = set()
        
        # Template database
        self.phishing_templates = {}
        self.active_campaigns = {}
        
        # Tracking server (mock)
        self.tracking_data = {}
        
        # Statistik
        self.stats = {
            "total_campaigns": 0,
            "total_emails_sent": 0,
            "total_clicks_tracked": 0,
            "total_credentials_harvested": 0,
            "by_template_category": {},
            "by_phishing_type": {},
            "success_rates": []
        }
        
    async def initialize(self):
        """Initialize Phishing Framework"""
        try:
            logger.info("üé£ Initializing Phishing Framework (Authorized Pentest Only)")
            
            # Skapa aiohttp session
            timeout = aiohttp.ClientTimeout(total=30, connect=10)
            self.session = aiohttp.ClientSession(timeout=timeout)
            
            # Initiera statistik
            for category in TemplateCategory:
                self.stats["by_template_category"][category.value] = {
                    "campaigns": 0,
                    "emails_sent": 0,
                    "success_rate": 0.0
                }
                
            for phishing_type in PhishingType:
                self.stats["by_phishing_type"][phishing_type.value] = {
                    "campaigns": 0,
                    "emails_sent": 0,
                    "clicks": 0
                }
                
            # Ladda f√∂rdefinierade templates
            await self._load_phishing_templates()
            
            self.initialized = True
            logger.info("‚úÖ Phishing Framework initialized f√∂r penetrationstestning")
            logger.warning("‚ö†Ô∏è ENDAST F√ñR PENETRATIONSTESTNING AV EGNA ORGANISATIONER")
            
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize Phishing Framework: {str(e)}")
            self.initialized = True  # Continue with limited functionality
            
    async def _load_phishing_templates(self):
        """Ladda f√∂rdefinierade phishing templates"""
        
        # Banking phishing templates
        banking_templates = [
            PhishingTemplate(
                name="Bank Account Security Alert",
                category=TemplateCategory.BANKING,
                phishing_type=PhishingType.EMAIL_CREDENTIAL_HARVEST,
                delivery_method=DeliveryMethod.EMAIL,
                subject_line="Urgent: Suspicious Activity Detected on Your Account",
                html_content="""
                <html>
                <body style="font-family: Arial, sans-serif;">
                    <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
                        <img src="https://via.placeholder.com/200x50/003366/FFFFFF?text=SecureBank" alt="SecureBank Logo" style="margin-bottom: 20px;">
                        <h2 style="color: #d32f2f;">Security Alert: Suspicious Activity</h2>
                        <p>Dear Valued Customer,</p>
                        <p>We have detected unusual activity on your account. For your security, we have temporarily limited access.</p>
                        <div style="background: #f5f5f5; padding: 15px; margin: 20px 0; border-left: 4px solid #d32f2f;">
                            <strong>Account:</strong> ****1234<br>
                            <strong>Date:</strong> {date}<br>
                            <strong>Activity:</strong> Login attempt from unknown device
                        </div>
                        <p>Please verify your identity immediately to restore full access:</p>
                        <a href="{phishing_url}" style="background: #1976d2; color: white; padding: 12px 24px; text-decoration: none; border-radius: 4px; display: inline-block; margin: 20px 0;">Verify Account Now</a>
                        <p><strong>This link will expire in 24 hours.</strong></p>
                        <hr style="margin: 30px 0; border: none; border-top: 1px solid #eee;">
                        <p style="font-size: 12px; color: #666;">
                            This is an automated security notification. Please do not reply to this email.
                        </p>
                    </div>
                </body>
                </html>
                """,
                text_content="SECURITY ALERT: Suspicious activity detected. Verify your account immediately.",
                landing_page_url="/banking-login",
                success_indicators=["login", "password", "account", "verify"],
                target_demographic="Banking customers, age 25-65",
                difficulty_level=3,
                social_engineering_techniques=["urgency", "authority", "fear"]
            )
        ]
        
        # Corporate phishing templates
        corporate_templates = [
            PhishingTemplate(
                name="IT Security Update Required",
                category=TemplateCategory.CORPORATE,
                phishing_type=PhishingType.EMAIL_CREDENTIAL_HARVEST,
                delivery_method=DeliveryMethod.EMAIL,
                subject_line="Action Required: Mandatory Security Update",
                html_content="""
                <html>
                <body style="font-family: 'Segoe UI', Arial, sans-serif;">
                    <div style="max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #ddd;">
                        <div style="background: #0078d4; color: white; padding: 15px; margin: -20px -20px 20px -20px;">
                            <h2 style="margin: 0;">IT Security Department</h2>
                        </div>
                        <p>Dear Employee,</p>
                        <p>As part of our ongoing security improvements, all employees must update their account credentials before <strong>{deadline}</strong>.</p>
                        <div style="background: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; margin: 20px 0; border-radius: 4px;">
                            <strong>‚ö†Ô∏è Failure to complete this update will result in account suspension.</strong>
                        </div>
                        <p>Click the link below to update your credentials:</p>
                        <a href="{phishing_url}" style="background: #0078d4; color: white; padding: 12px 24px; text-decoration: none; border-radius: 4px; display: inline-block; margin: 20px 0;">Update Credentials</a>
                        <p>If you have any questions, contact IT Support at ext. 1234.</p>
                        <hr style="margin: 30px 0;">
                        <p style="font-size: 11px; color: #666;">
                            IT Security Department | Internal Communication | Do Not Forward
                        </p>
                    </div>
                </body>
                </html>
                """,
                text_content="IT Security: Mandatory credential update required before deadline.",
                landing_page_url="/corporate-login",
                success_indicators=["username", "password", "domain", "employee"],
                target_demographic="Corporate employees, all levels",
                difficulty_level=2,
                social_engineering_techniques=["authority", "compliance", "deadline"]
            )
        ]
        
        # Social media phishing
        social_templates = [
            PhishingTemplate(
                name="Account Verification Required",
                category=TemplateCategory.SOCIAL_MEDIA,
                phishing_type=PhishingType.EMAIL_CREDENTIAL_HARVEST,
                delivery_method=DeliveryMethod.EMAIL,
                subject_line="Action needed to keep your account active",
                html_content="""
                <html>
                <body style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;">
                    <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
                        <div style="text-align: center; margin-bottom: 30px;">
                            <div style="background: #1877f2; color: white; padding: 10px 20px; border-radius: 8px; display: inline-block;">
                                <h2 style="margin: 0; font-size: 24px;">facebook</h2>
                            </div>
                        </div>
                        <h3>Hi {name},</h3>
                        <p>We noticed some unusual activity on your account. To keep your account secure, please verify your identity.</p>
                        <div style="background: #f0f2f5; padding: 20px; border-radius: 8px; margin: 20px 0;">
                            <p style="margin: 0;"><strong>Recent activity:</strong></p>
                            <p style="margin: 5px 0;">‚Ä¢ Login from new device</p>
                            <p style="margin: 5px 0;">‚Ä¢ Location: {location}</p>
                            <p style="margin: 5px 0;">‚Ä¢ Time: {time}</p>
                        </div>
                        <p>If this was you, please verify your account to continue using Facebook normally.</p>
                        <div style="text-align: center; margin: 30px 0;">
                            <a href="{phishing_url}" style="background: #1877f2; color: white; padding: 12px 32px; text-decoration: none; border-radius: 6px; font-weight: 600;">Verify Account</a>
                        </div>
                        <p style="font-size: 14px; color: #65676b;">
                            If you don't verify your account within 48 hours, it may be temporarily restricted.
                        </p>
                        <hr style="margin: 30px 0; border: none; border-top: 1px solid #dadde1;">
                        <p style="font-size: 12px; color: #8a8d91;">
                            This message was sent to {email} | ¬© Facebook, Inc.
                        </p>
                    </div>
                </body>
                </html>
                """,
                text_content="Facebook: Account verification required due to unusual activity.",
                landing_page_url="/facebook-login",
                success_indicators=["email", "password", "phone"],
                target_demographic="Social media users, age 16-45",
                difficulty_level=4,
                social_engineering_techniques=["familiarity", "urgency", "social_proof"]
            )
        ]
        
        # Samla alla templates
        all_templates = banking_templates + corporate_templates + social_templates
        
        for template in all_templates:
            template_id = hashlib.md5(f"{template.name}{template.category.value}".encode()).hexdigest()[:8]
            self.phishing_templates[template_id] = template
            
        logger.info(f"üìã Loaded {len(all_templates)} phishing templates")
        
    def add_authorized_organization(self, organization: str):
        """L√§gg till auktoriserad organisation f√∂r penetrationstestning"""
        self.authorized_organizations.add(organization.lower())
        logger.info(f"‚úÖ Added authorized organization f√∂r phishing testing: {organization}")
        
    def add_authorized_domain(self, domain: str):
        """L√§gg till auktoriserad dom√§n f√∂r penetrationstestning"""
        self.authorized_domains.add(domain.lower())
        logger.info(f"‚úÖ Added authorized domain f√∂r phishing testing: {domain}")
        
    def _is_target_authorized(self, email: str, organization: str) -> bool:
        """Kontrollera om target √§r auktoriserat f√∂r testning"""
        org_lower = organization.lower()
        
        # Kontrollera organisation
        if org_lower not in self.authorized_organizations:
            return False
            
        # Kontrollera email domain
        email_domain = email.split('@')[-1].lower() if '@' in email else ""
        
        for auth_domain in self.authorized_domains:
            if email_domain == auth_domain or email_domain.endswith(f".{auth_domain}"):
                return True
                
        return False
        
    async def get_phishing_templates(self, category: Optional[TemplateCategory] = None,
                                   phishing_type: Optional[PhishingType] = None) -> List[PhishingTemplate]:
        """H√§mta tillg√§ngliga phishing templates"""
        
        results = []
        
        for template_id, template in self.phishing_templates.items():
            match = True
            
            if category and template.category != category:
                match = False
                
            if phishing_type and template.phishing_type != phishing_type:
                match = False
                
            if match:
                results.append(template)
                
        return results
        
    async def create_phishing_campaign(self, campaign_name: str, template_id: str,
                                     target_list: List[Dict[str, str]],
                                     organization: str,
                                     smtp_config: Optional[Dict[str, Any]] = None,
                                     tracking_enabled: bool = True) -> PhishingCampaign:
        """Skapa phishing campaign (endast auktoriserade organisationer)"""
        
        if not self.initialized:
            await self.initialize()
            
        # Kontrollera auktorisation
        for target in target_list:
            email = target.get('email', '')
            if not self._is_target_authorized(email, organization):
                raise ValueError(f"Target not authorized f√∂r phishing testing: {email}")
                
        if template_id not in self.phishing_templates:
            raise ValueError(f"Template not found: {template_id}")
            
        # Skapa campaign
        campaign_id = hashlib.md5(f"{campaign_name}{time.time()}".encode()).hexdigest()[:8]
        
        campaign = PhishingCampaign(
            campaign_id=campaign_id,
            name=campaign_name,
            template=self.phishing_templates[template_id],
            target_list=target_list,
            smtp_config=smtp_config,
            tracking_enabled=tracking_enabled,
            scheduled_time=None,
            authorized_organization=organization
        )
        
        self.active_campaigns[campaign_id] = campaign
        logger.info(f"‚úÖ Created phishing campaign: {campaign_name} ({campaign_id})")
        
        return campaign
        
    async def execute_phishing_campaign(self, campaign_id: str,
                                      test_mode: bool = False) -> PhishingResult:
        """Exekvera phishing campaign"""
        
        if campaign_id not in self.active_campaigns:
            raise ValueError(f"Campaign not found: {campaign_id}")
            
        campaign = self.active_campaigns[campaign_id]
        start_time = time.time()
        
        # R√§knare
        emails_sent = 0
        delivery_failures = 0
        error_messages = []
        
        # Skicka emails (mock i test mode)
        for target in campaign.target_list:
            try:
                email = target.get('email', '')
                name = target.get('name', 'User')
                
                if test_mode:
                    # Mock email sending
                    await asyncio.sleep(0.1)  # Simulera sending time
                    emails_sent += 1
                    logger.info(f"üìß Mock email sent to: {email}")
                else:
                    # Real email sending (implementera senare)
                    success = await self._send_phishing_email(campaign, target)
                    if success:
                        emails_sent += 1
                    else:
                        delivery_failures += 1
                        
            except Exception as e:
                delivery_failures += 1
                error_messages.append(f"Failed to send to {email}: {str(e)}")
                logger.error(f"‚ùå Failed to send phishing email to {email}: {str(e)}")
                
        # Uppdatera statistik
        self.stats["total_campaigns"] += 1
        self.stats["total_emails_sent"] += emails_sent
        self.stats["by_template_category"][campaign.template.category.value]["campaigns"] += 1
        self.stats["by_template_category"][campaign.template.category.value]["emails_sent"] += emails_sent
        self.stats["by_phishing_type"][campaign.template.phishing_type.value]["campaigns"] += 1
        self.stats["by_phishing_type"][campaign.template.phishing_type.value]["emails_sent"] += emails_sent
        
        execution_time = time.time() - start_time
        success_rate = (emails_sent / max(1, len(campaign.target_list))) * 100
        
        result = PhishingResult(
            campaign_id=campaign_id,
            total_targets=len(campaign.target_list),
            emails_sent=emails_sent,
            delivery_failures=delivery_failures,
            clicks_tracked=0,  # Uppdateras n√§r tracking implementeras
            credentials_harvested=0,  # Uppdateras n√§r harvesting implementeras
            success_rate=success_rate,
            execution_time=execution_time,
            error_messages=error_messages
        )
        
        logger.info(f"‚úÖ Phishing campaign executed: {campaign.name} - {emails_sent}/{len(campaign.target_list)} emails sent")
        
        return result
        
    async def _send_phishing_email(self, campaign: PhishingCampaign, target: Dict[str, str]) -> bool:
        """Skicka phishing email (endast i test mode f√∂r s√§kerhet)"""
        
        try:
            # I produktion skulle detta skicka riktiga emails
            # F√∂r s√§kerhet implementerar vi bara mock functionality
            logger.info(f"üìß Mock: Would send phishing email to {target.get('email')}")
            await asyncio.sleep(0.5)  # Simulera sending time
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error sending email: {str(e)}")
            return False
            
    def customize_template(self, template_id: str, customizations: Dict[str, str]) -> str:
        """Anpassa phishing template"""
        
        if template_id not in self.phishing_templates:
            raise ValueError(f"Template not found: {template_id}")
            
        original_template = self.phishing_templates[template_id]
        
        # Skapa kopia av template
        customized_template = PhishingTemplate(
            name=f"{original_template.name} (Customized)",
            category=original_template.category,
            phishing_type=original_template.phishing_type,
            delivery_method=original_template.delivery_method,
            subject_line=original_template.subject_line,
            html_content=original_template.html_content,
            text_content=original_template.text_content,
            landing_page_url=original_template.landing_page_url,
            success_indicators=original_template.success_indicators.copy(),
            target_demographic=original_template.target_demographic,
            difficulty_level=original_template.difficulty_level,
            social_engineering_techniques=original_template.social_engineering_techniques.copy()
        )
        
        # Applicera anpassningar
        for field, value in customizations.items():
            if hasattr(customized_template, field):
                setattr(customized_template, field, value)
                
        # Ers√§tt placeholders i content
        for placeholder, replacement in customizations.items():
            if customized_template.html_content:
                customized_template.html_content = customized_template.html_content.replace(
                    f"{{{placeholder}}}", replacement
                )
            if customized_template.text_content:
                customized_template.text_content = customized_template.text_content.replace(
                    f"{{{placeholder}}}", replacement
                )
                
        # Spara customized template
        custom_id = hashlib.md5(f"{template_id}{time.time()}".encode()).hexdigest()[:8]
        self.phishing_templates[custom_id] = customized_template
        
        logger.info(f"‚úÖ Created customized template: {custom_id}")
        return custom_id
        
    def get_phishing_statistics(self) -> Dict[str, Any]:
        """H√§mta phishing-statistik"""
        return {
            "total_campaigns": self.stats["total_campaigns"],
            "total_emails_sent": self.stats["total_emails_sent"],
            "total_clicks_tracked": self.stats["total_clicks_tracked"],
            "total_credentials_harvested": self.stats["total_credentials_harvested"],
            "by_template_category": self.stats["by_template_category"],
            "by_phishing_type": self.stats["by_phishing_type"],
            "success_rates": self.stats["success_rates"],
            "authorized_organizations": list(self.authorized_organizations),
            "authorized_domains": list(self.authorized_domains),
            "templates_available": len(self.phishing_templates),
            "active_campaigns": len(self.active_campaigns)
        }
        
    async def create_landing_page(self, template: PhishingTemplate,
                                tracking_enabled: bool = True) -> str:
        """Skapa phishing landing page"""
        
        # Mock implementation - i produktion skulle detta skapa riktiga landing pages
        landing_page_id = hashlib.md5(f"{template.name}{time.time()}".encode()).hexdigest()[:8]
        
        landing_page_html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>Login - {template.category.value.title()}</title>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <style>
                body {{ font-family: Arial, sans-serif; background: #f5f5f5; margin: 0; padding: 20px; }}
                .login-container {{ max-width: 400px; margin: 100px auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
                .form-group {{ margin-bottom: 20px; }}
                label {{ display: block; margin-bottom: 5px; font-weight: bold; }}
                input[type="text"], input[type="email"], input[type="password"] {{ width: 100%; padding: 12px; border: 1px solid #ddd; border-radius: 4px; font-size: 14px; }}
                .login-btn {{ background: #1976d2; color: white; padding: 12px 24px; border: none; border-radius: 4px; width: 100%; font-size: 16px; cursor: pointer; }}
                .login-btn:hover {{ background: #1565c0; }}
            </style>
        </head>
        <body>
            <div class="login-container">
                <h2>Sign In</h2>
                <form method="POST" action="/submit">
                    <div class="form-group">
                        <label>Username/Email:</label>
                        <input type="email" name="username" required>
                    </div>
                    <div class="form-group">
                        <label>Password:</label>
                        <input type="password" name="password" required>
                    </div>
                    <button type="submit" class="login-btn">Sign In</button>
                </form>
            </div>
            {'<script>console.log("Tracking enabled");</script>' if tracking_enabled else ''}
        </body>
        </html>
        """
        
        # I produktion skulle detta spara till fil/databas
        logger.info(f"‚úÖ Created mock landing page: {landing_page_id}")
        
        return landing_page_id
        
    async def test_phishing_framework(self, test_organization: str = "test-company") -> Dict[str, Any]:
        """Testa phishing framework"""
        
        # L√§gg till test organization som auktoriserad
        self.add_authorized_organization(test_organization)
        self.add_authorized_domain("test-company.com")
        
        results = {}
        
        # Testa template creation
        templates = await self.get_phishing_templates()
        results["templates_loaded"] = len(templates)
        
        if templates:
            # Testa campaign creation
            try:
                test_targets = [
                    {"email": "test1@test-company.com", "name": "Test User 1"},
                    {"email": "test2@test-company.com", "name": "Test User 2"}
                ]
                
                campaign = await self.create_phishing_campaign(
                    "Test Campaign",
                    list(self.phishing_templates.keys())[0],
                    test_targets,
                    test_organization
                )
                
                results["campaign_created"] = True
                results["campaign_id"] = campaign.campaign_id
                
                # Testa campaign execution
                result = await self.execute_phishing_campaign(campaign.campaign_id, test_mode=True)
                results["campaign_executed"] = True
                results["emails_sent"] = result.emails_sent
                results["success_rate"] = result.success_rate
                
            except Exception as e:
                results["campaign_error"] = str(e)
                
        return results
        
    async def cleanup(self):
        """Cleanup Phishing Framework"""
        logger.info("üßπ Cleaning up Phishing Framework")
        
        if self.session:
            await self.session.close()
            
        self.authorized_organizations.clear()
        self.authorized_domains.clear()
        self.phishing_templates.clear()
        self.active_campaigns.clear()
        self.tracking_data.clear()
        self.stats.clear()
        self.initialized = False
        logger.info("‚úÖ Phishing Framework cleanup completed")
